==========================================
Plywood Directory and File Path Structures
==========================================

--------
Entities
--------

Each type of entity has it's own root level folder in which it can store all of its items and indexes:
  c: contexts
  p: packages
  v: versions
  r: roles
  s: servers

In an entity's folder there are a list of folders containing the details and sub indexes for each item. The folder name is simply the key (Guid) of the item in lowercase with no hyphenation. E.g:
  /g/3bc0f2892e584967b6e6d0f1b5828a25/
is the full path to the directory of the group object with key "3bc0f289-2e58-4967-b6e6-d0f1b5828a25".

In an entity's directory there will be an details file containing the properties of the entity serialised in XML. This file is named "d" and would result in a path to the file such as:
  /g/3bc0f2892e584967b6e6d0f1b5828a25/d

NOTE: For details of the formats of these files, please see the XSD schemas and example xml files in the "Schemas" folder of the "PlywoodCore" project.

Version files are stored in a folder named "c" for "content":
  /v/7dc11e0cd5c511e0ae846ab04724019b/c/...

Version Files
-------------

In the directory of a version (e.g. "/v/56ed6820c39049f09760802aea44905f/") there is a directory containing all of the content files that actually constitute that version. This folder is named "c" resulting in the root path of the content of a specific version looking like:

  /v/56ed6820c39049f09760802aea44905f/c/

-------
Indexes
-------

The indexes in plywood take advantage of the ability of the underlying storage system to list keys of objects in ascending order with a specific prefix and logically after a specified key. Using these features we create empty placeholder files which use only their file name to hold information about an index row. 

All listing of items is done solely by listing the index objects. No content of any file is loaded to perform a listing.

Index Container Folders
-----------------------

Within one entity there may be multiple indexes e.g. a group entity would have an apps index and a targets index. Therefore the naming convention should be the entity letter (a or t in the example) followed by the letter 'i'. E.g.
Group app index folder:
  /g/3bc0f2892e584967b6e6d0f1b5828a25/ai/
Target instance index folder:
  /t/44d81279d41643f8a4592c0271342795/ii/

Also at the root level is the global groups indexes in the folder "/ci/".

Index Partitions
----------------

Inside an index there are two primary partitions to the index: everything and tokenised. Tokens are simply a single part of the original index entry meta-data that would want to be searched on. The tokens for a title would simply be each of the words making up that title.

The everything partition simply contains all of the index entries. However, the tokenised partitions only contain the index entries that contain the given tokens. 

The everything partition is contained in a folder named "e", the tokenised partitions are in an folder named "t". Within the tokenised folder each token has its own folder which is simply a (algorithm to be confirmed - md5 or preferable only 64 bit?) hash of the token. E.g.
Group app everything index folder:
  /g/3bc0f2892e584967b6e6d0f1b5828a25/ai/e/
Group app "test" token index folder:
  /g/3bc0f2892e584967b6e6d0f1b5828a25/ai/t/098f6bcd4621d373cade4e832627b4f6/

To enable wildcard queries we also need to have an index of the tokens. This is achieved through using a folder named "s" containing the string values of the tokens. Each token index entry filename is a the token URL value encoded, followed by hyphen, followed by the token hash.

Group app "test" token index entry:
  /g/3bc0f2892e584967b6e6d0f1b5828a25/ai/s/test-098f6bcd4621d373cade4e832627b4f6
App version "test.config" token index entry:
  /a/cbcb3ea1251048b8b368d12db433bf9b/vi/s/test%2Econfig-d95319276182ba5a0aabee31c75226bc

Index Entry File Names
----------------------

The structure of an index entry is that it is a sortable alphanumeric hash followed by hyphen, followed by the item key, followed by another hyphen, followed by the meta data of the index entry. 

App version 1.0.1 index entry:
  /a/cbcb3ea1251048b8b368d12db433bf9b/vi/e/1a0a1-56ed6820c39049f09760802aea44905f-1%2E0%2E1%20Alpha%20Release
Group app index found via the "test" token.
  /g/3bc0f2892e584967b6e6d0f1b5828a25/ai/t/098f6bcd4621d373cade4e832627b4f6/webapp1-cbcb3ea1251048b8b368d12db433bf9b-Web%20App%201

Index File Length Limits
------------------------

The base maximum length of an index entry is 109 characters with 34 characters in the base file name length. File names should be limited to 255 characters therefore if the hash is limited to 41 characters then the index metadata is limited to 180 characters which is only 60 letters of metadata if every character has be be URL entity encoded.